{"version":3,"sources":["actions.js","containers/cell.js","containers/map.js","App.js","serviceWorker.js","reducers/reducer_map.js","helpers.js","reducers/index.js","index.js"],"names":["LEFT_CLICK","RIGHT_CLICK","leftClick","type","payload","rightClick","Cell","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","cellsClass","classNames","cell","clicked","undefined","image","top","row","left","column","divStyle","backgroundImage","concat","0","1","2","3","4","5","6","7","8","9","10","react_default","a","createElement","className","style","onClick","handleClick","bind","onContextMenu","Component","connect","dispatch","bindActionCreators","Map","theMap","map","item","key","subitem","col","value","_ref","App","Boolean","window","location","hostname","match","initialState","outerArray","i","innerArray","j","push","nestedArray","rootReducer","combineReducers","state","arguments","length","action","createStoreWithMiddleware","applyMiddleware","createStore","ReactDOM","render","es","store","reducers","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAAaA,EAAa,aACbC,EAAc,cAEpB,SAASC,IACd,MAAO,CACLC,KAAMH,EACNI,QAAS,IAIN,SAASC,IACd,MAAO,CACLF,KAAMF,EACNG,QAAS,yBCPPE,cACJ,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACZH,sHAGMO,qCAEZ,IAAIC,EAAaC,IAAW,CAC1BC,MAAM,EACNC,QAASR,KAAKH,MAAMW,UAEtB,QAAyBC,IAArBT,KAAKH,MAAMa,MACb,IAcIC,EAAM,GAAsB,GAAjBX,KAAKH,MAAMe,IAAW,KACjCC,EAAO,IAAM,GAAKb,KAAKH,MAAMiB,OAAS,KACtCC,EAAW,CACbC,gBAAe,OAAAC,OAjBF,sBAiBE,KAAAA,OAhBA,CACfC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,EAAG,OACHC,GAAI,QAKyC5B,KAAKH,MAAMa,OAAzC,SACfC,MACAE,QAGJ,OACEgB,EAAAC,EAAAC,cAAA,MACEC,UAAW3B,EACX4B,MAAOlB,EACPmB,QAASlC,KAAKmC,YAAYC,KAAKpC,MAC/BqC,cAAerC,KAAKqC,cAAcD,KAAKpC,OAJzC,YAnCasC,aAmDJC,kBACb,KALF,SAA4BC,GAC1B,OAAOC,YAAmB,CAAE9C,aAAYH,aAAagD,IAGxCD,CAGb3C,GCtDI8C,cACJ,SAAAA,EAAY7C,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0C,GAAA5C,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4C,GAAAvC,KAAAH,KACZH,0EAIN,OACEgC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACG/B,KAAKH,MAAM8C,OAAOC,IAAI,SAACC,EAAMjC,GAC5B,OACEiB,EAAAC,EAAAC,cAAA,MAAIe,IAAKlC,EAAKoB,UAAU,UACrBa,EAAKD,IAAI,SAACG,EAASC,GAClB,OACEnB,EAAAC,EAAAC,cAACxB,EAAD,CAAMuC,IAAKE,EAAKpC,IAAKA,EAAKE,OAAQkC,EAAKC,MAAOF,mBAflDT,aAoCHC,kBARf,SAAAW,GACE,MAAO,CAAEP,OAD0BO,EAAVP,SAI3B,SAA4BH,GAC1B,OAAOC,YAAmB,GAAID,IAGjBD,CAGbG,GC/BaS,0LARX,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACa,EAAD,cAJUN,cCQEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCfN,IAAIC,ECHG,SAAqB7C,EAAKoC,GAE/B,IADA,IAAIU,EAAa,GACRC,EAAI,EAAGA,EAAI/C,EAAK+C,IAAK,CAE5B,IADA,IAAIC,EAAa,GACRC,EAAI,EAAGA,EAAIb,EAAKa,IACvBD,EAAWE,KAAK,IAElBJ,EAAWI,KAAKF,GAElB,OAAOF,EDNUK,CAAY,GAAI,IEIpBC,EAJKC,YAAgB,CAClCtB,OFCa,WAAuC,IAA9BuB,EAA8BC,UAAAC,OAAA,QAAA3D,IAAA0D,UAAA,GAAAA,UAAA,GAAtBV,EAAcY,EAAQF,UAAAC,OAAA,EAAAD,UAAA,QAAA1D,EACpD,OAAI4D,EAAO3E,QAAgB2E,EAAO3E,QAC3BwE,KGGHI,EAA4BC,cAAkBC,KAEpDC,IAASC,OACP7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAUC,MAAON,EAA0BO,IACzChD,EAAAC,EAAAC,cAAC+C,EAAD,OAEFC,SAASC,eAAe,SJiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bc4d9937.chunk.js","sourcesContent":["export const LEFT_CLICK = \"LEFT_CLICK\";\nexport const RIGHT_CLICK = \"RIGHT_CLICK\";\n\nexport function leftClick() {\n  return {\n    type: LEFT_CLICK,\n    payload: []\n  };\n}\n\nexport function rightClick() {\n  return {\n    type: RIGHT_CLICK,\n    payload: []\n  };\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { rightClick, leftClick } from \"../actions\";\nimport classNames from \"classnames\";\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n  }\n  handleClick() {}\n  onContextMenu(e) {}\n  render() {\n    let cellsClass = classNames({\n      cell: true,\n      clicked: this.props.clicked\n    });\n    if (this.props.image !== undefined) {\n      const images = \"./src/static/images\";\n      let map_images = {\n        0: \"number0\",\n        1: \"number1\",\n        2: \"number2\",\n        3: \"number3\",\n        4: \"number4\",\n        5: \"number5\",\n        6: \"number6\",\n        7: \"number7\",\n        8: \"number8\",\n        9: \"flag\",\n        10: \"bomb\"\n      };\n      let top = 50 + this.props.row * 25 + \"px\";\n      let left = 500 + 25 * this.props.column + \"px\";\n      var divStyle = {\n        backgroundImage: `url(${images}/${map_images[this.props.image]}.png)`,\n        top,\n        left\n      };\n    }\n    return (\n      <td\n        className={cellsClass}\n        style={divStyle}\n        onClick={this.handleClick.bind(this)}\n        onContextMenu={this.onContextMenu.bind(this)}\n      >\n        X\n      </td>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ rightClick, leftClick }, dispatch);\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Cell);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport {} from \"../actions\";\nimport Cell from \"./cell\";\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <table>\n          <tbody>\n            {this.props.theMap.map((item, row) => {\n              return (\n                <tr key={row} className=\"mapRow\">\n                  {item.map((subitem, col) => {\n                    return (\n                      <Cell key={col} row={row} column={col} value={subitem} />\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ theMap }) {\n  return { theMap };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({}, dispatch);\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Map);\n","import React, { Component } from \"react\";\nimport Map from \"./containers/map\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Map />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { LEFT_CLICK, RIGHT_CLICK } from \"../actions\";\nimport { nestedArray } from \"../helpers\";\n\nlet initialState = nestedArray(10, 10);\n\nexport default function(state = initialState, action) {\n  if (action.payload) return action.payload;\n  return state;\n}\n","export function nestedArray(row, col) {\n  let outerArray = [];\n  for (let i = 0; i < row; i++) {\n    let innerArray = [];\n    for (let j = 0; j < col; j++) {\n      innerArray.push(\"\");\n    }\n    outerArray.push(innerArray);\n  }\n  return outerArray;\n}\n","import { combineReducers } from \"redux\";\nimport mapReducer from \"./reducer_map\";\n\nconst rootReducer = combineReducers({\n  theMap: mapReducer\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducers from \"./reducers\";\n\nconst createStoreWithMiddleware = applyMiddleware()(createStore);\n\nReactDOM.render(\n  <Provider store={createStoreWithMiddleware(reducers)}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}